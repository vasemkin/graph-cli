let immutable = require('immutable')
let Map = immutable.Map

class Field {
  constructor(name, type) {
    this.name = name
    this.type = type
  }

  toString() {
    return `${this.name}: ${this.type.toString()}`
  }
}

class NullableType {
  constructor(inner) {
    this.inner = inner
  }

  toString() {
    return `?${this.inner.toString()}`
  }
}

class ArrayType {
  constructor(inner) {
    this.inner = inner
    this.name = `[]${inner.toString()}`
  }

  toString() {
    return this.name
  }
}

class Product {
  constructor(name) {
    this.name = name
    this.fields = []
  }

  addField(field) {
    this.fields.push(field)
  }

  toString() {
    return`
data ${this.name}:
    ${this.fields.map(field => field.toString()).join('\n\t')}
`
  }
}

class NamedType {
  constructor(name) {
    this.name = name
  }

  toString() {
    return this.name
  }

  capitalize() {
    this.name = this.name.charAt(0).toUpperCase() + this.name.slice(1)
    return this
  }

  isPrimitive() {
    let primitives = [
      'bool',
      'u8',
      'i8',
      'u16',
      'i16',
      'u32',
      'i32',
      'u64',
      'i64',
      'f32',
      'f64'
    ]
    return primitives.includes(this.name)
  }
}

class ModuleImports {
  constructor(nameOrNames, module) {
    this.nameOrNames = nameOrNames
    this.module = module
  }

  toString() {
    return `import { ${
      typeof this.nameOrNames === 'string' ? this.nameOrNames : this.nameOrNames.join(',')
    } } from "${this.module}"`
  }
}


const product = (name, options) => new Product(name, options)
const field = (name, type) => new Field(name, type)
const nullableType = type => new NullableType(type)
const arrayType = name => new ArrayType(name)
const namedType = name => new NamedType(name)
const moduleImports = (nameOrNames, module) => new ModuleImports(nameOrNames, module)

const GENERATED_FILE_NOTE = '--THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'

module.exports = {
  // Types
  Product,
  Field,
  NullableType,
  ArrayType,
  NamedType,
  ModuleImports,

  // Code generators
  product,
  field,
  nullableType,
  arrayType,
  namedType,
  moduleImports,

  // Utilities
  GENERATED_FILE_NOTE,
}
